from __future__ import print_function
import os
from flask import Flask, flash, request, redirect, url_for, session
import sys
from werkzeug.utils import secure_filename
from flask_cors import CORS, cross_origin
import logging
import matplotlib as mpl
import matplotlib.pylab as plt
import numpy as np
import math
from PIL import Image
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image
import cv2
from tensorflow.keras.optimizers import Adam
from tensorflow.keras import layers
from tensorflow.keras import Model
import tensorflow as tf

logging.basicConfig(level=logging.INFO)

logger = logging.getLogger('HELLO WORLD')


UPLOAD_FOLDER = '/upload'
ALLOWED_EXTENSIONS = set(['txt', 'pdf', 'png', 'jpg', 'jpeg', 'gif','docx','hwp','ppt','pptx','exe','h5','cpp','c','asm','ipynb','py','jfif','mp4','docs','jav','js','java','avi','mov','mp3','html','flv','pb','json','jar','tar','zip','mkv','mmf','wmv','php','rar','smi','ttf','xml','so','dh'])

app = Flask(__name__)
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER
CORS(app, support_credentials=True)

#파일 확장자명 확인
def allowed_file(filename):
    return '.' in filename and \
           filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

#binary로 읽어온 파일을 offset 과 hex로 나타낸다.
def print_hex_dump(buffer, start_offset=0):
    offset = 0
    while offset < len(buffer):
        #Offset
        print(' %08X ' % (offset + start_offset), end='')
        if ((len(buffer) - offset) < 0x10) is True:
            data = buffer[offset:]
        else:
            data = buffer[offset:offset + 0x10]
        # Hex Dump
        if len(data) == 16:
            for hex_dump in data:
                print("%02X" % hex_dump, end=' ')
        else:
            for hex_dump in data:
                print("%02X" % hex_dump, end=' ')

            for i in range(len(data), 16, 1):
                print("00", end=' ')
        if ((len(buffer) - offset) < 0x10) is True:
            print(' ' * (3 * (0x10 - len(data))), end='')
        offset = offset + len(data)
        print('  ')


#hex파일을 바탕으로 이미지화를 한 후에 png확장자를 가진 파일로 저장
def convertAndSave(array,name):
    root = '/upload'
    if array.shape[1]!=16: #If not hexadecima
        assert(False)
    b=int((array.shape[0]*16)**(0.5))
    b=2**(int(math.log(b)/math.log(2))+1)
    a=int(array.shape[0]*16/b)
    array=array[:a*b//16,:]
    array=np.reshape(array,(a,b))
    im = Image.fromarray(np.uint8(array))
    im.save(root+'\\'+name+'.png', "PNG")
    return im


@app.route('/')
def hello():
    return 'hello'

@app.route('/upload', methods=['POST','GET'])
def fileUpload():
    if request.method == 'POST':
        #파일이 없을 경우
        if 'file' not in request.files:
            flash('No file part')
            #return redirect(request.url)
            return 'File을 업로드 해 주세요'

        file = request.files['file']
        #파일이 온전하게 온 경우
        if file and allowed_file(file.filename):
            filename = secure_filename(file.filename)
            #파일을 /upload 디렉토리에 저장
            file.save(os.path.join(app.config['UPLOAD_FOLDER'], secure_filename(file.filename)))
            with open(os.path.join(app.config['UPLOAD_FOLDER'], filename),'rb') as ff:
                #표준출력을 bytes파일에 지정한다.
                sys.stdout = open('/upload/output100.bytes', 'w')
                t = ff.read()
                #헥사파일로 만든다.
                print_hex_dump(t)
                #표준출력 복귀
                sys.stdout = sys.__stdout__
                files = os.listdir('/upload')
                #디렉토리 내의 파일들 중 bytes파일(hex파일)을 찾아서 이미지 화 하기 위해서 함수를 호출한다.
                #인자는 파일 내의 행단위 이다.
                for counter, name in enumerate(files):
                    if '.bytes' != name[-6:]:
                        continue
                    afterHex =  open('/upload/output100.bytes', 'r')
                    array = []
                    for line in afterHex:
                        xx = line.split()
                        if len(xx)!=17:
                            continue
                        array.append([int(i,16) if i!='??' else 0 for i in xx[1:] ])
                    im = convertAndSave(np.array(array),name)
                    del array
                    afterHex.close()

                img_width = 150
                img_height = 150
                #학습 모델을 불러온다.
                # model = load_model('/upload/BCmodeltwo.h5')
                model = tf.keras.models.load_model('/upload/malware_classifier2.h5')
                model.compile(loss='binary_crossentropy',
                              optimizer='Adam',
                              metrics=['acc'])
                img = im
                x = image.img_to_array(img)
                x = x/255
                x = cv2.resize(x, (img_width, img_height))
                x = cv2.cvtColor(x, cv2.COLOR_GRAY2BGR)
                x = np.expand_dims(x, axis=0)

                images = np.vstack([x])
                predict = model.predict(images)
                #predict = np.argmax(predict,axis=1)
                #추론 결과 정상인 경우이다.
                if predict[0][0] <= 0.5:
                    a = 100*predict[0][0]
                    a = 100 - a
                    a = round(a,2)
                    temp = str(a) + "%"+ " 의 확률로 정상 파일 입니다."
                    return temp
                #추론 결과 악성인 경우이다.
                elif predict[0][0] > 0.5:
                    a = 100*predict[0][0]
                    a = round(a,2)
                    temp = str(a)+ "%"+ " 의 확률로 악성 파일 입니다."
                    return temp
           

    elif request.method == 'GET':
        return 'This is GET'
        

if __name__ == "__main__":  
    app.secret_key = os.urandom(24)
    app.run('0.0.0.0', port=8000, use_reloader=False)

